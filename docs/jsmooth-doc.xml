<?xml version="1.0"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
                    "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<article>
<articleinfo>
   "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd"

  <author>
    <firstname>Rodrigo</firstname>
    <surname>Reyes</surname>
  </author>

<revhistory>
  <revision>
    <revnumber>1.0</revnumber>
    <date>10 Sep 2003</date>
    <authorinitials>RR</authorinitials>
    <revremark>First draft</revremark>
  </revision>
</revhistory>

  <title>JSmooth @{VERSION}@ User Manual</title>
  <subtitle>@{RELEASEINFO}@</subtitle>
</articleinfo>

<sect1>
<title>Introduction</title>

  <sect2><title>What is JSmooth?</title>
   <para>

JSmooth is a Java Executable Wrapper that builds standard Windows
executable binaries (.exe) that launch java applications. Such binaries
contain all the information needed to launch your java application,
i.e. the classpath, the java properties, the jvm version required, and
so on. If Java is not installed, it helps the users by displaying them a
notice before launching automatically a browser to a web site where they
can download a JVM.

   </para>
   
   <sect3><title>Web Site</title>
   <para>
    <itemizedlist>

     <listitem><para> The JSmooth web page is located at <ulink
     url="http://jsmooth.sourceforge.net/">http://jsmooth.sourceforge.net/</ulink>
       </para></listitem>

     <listitem><para> The JSmooth Project web page is hoster at <ulink
     url="http://sourceforge.net/projects/jsmooth">http://sourceforge.net/projects/jsmooth</ulink>.
       </para></listitem>

   </itemizedlist>

   </para>
  </sect3>
  </sect2>

  <sect2><title>Rationale</title>
   <para>

   The deployment of desktop Java applications has been a problem since
   version 1 of Java. Java developers had to either bundle a JRE with
   their application, or let the users manage themselves the issue of
   installing a JVM and configuring the application. Unfortunately, none
   of those solutions are efficient and scalable.

   </para>

   <para>

    Let's examine a few facts:
  
   <itemizedlist>

     <listitem><para> The size of a JRE bundle gets bigger and bigger
         as the Java language evolves, as shown in the table below.

	   <informaltable frame='all'>
	    <tgroup cols='2'>
	      <colspec colwidth='1.0in'/>
	      <colspec colwidth='3.0in'/>
	      <tbody>
	        <row><entry>Version</entry><entry>Zipped JRE Bundle (approx.)</entry></row>
	        <row><entry>JRE 1.1</entry><entry>2MB</entry></row>
		<row><entry>JRE 1.2</entry><entry>11MB</entry></row>
		<row><entry>JRE 1.3</entry><entry>14MB</entry></row>
		<row><entry>JRE 1.4</entry><entry>30MB</entry></row>
	      </tbody>
	      </tgroup>
	    </informaltable>

	   </para><para>

	   While it was reasonable to bundle the JRE 1.1 with the
	   application, bundling the JRE 1.4 increases drastically the
	   size of the bundle. This may not be an issue for vendors
	   that are used to sell a packaged box with a CD, but stays
	   an open issue for open-source developer and companies
	   distributing their software product on the internet.

	   </para></listitem>

     <listitem><para>

       Letting average Joe User manage the configuration of his system
       is probably not a good idea either. Do not forget that the choice
       of Java for your application is your choice, not Joe's, and he
       probably don't even know what Java is. Should he really care
       about it? No, for sure. If your software product targets
       experienced users, you are a lucky developer and you may not need
       to worry about the technical details of your application's
       usage. But even for the experienced users, it is always worth it
       making sure they won't loose their time installing and
       configuring the application.

       </para><para>

       Image now that Joe was smart enough to be able to find a JVM on
       his own, to download and install it. Fine. It'll work
       seamlessly for your own application, you say. Wrong. What if
       your application requires Java 1.4 and what he installed is
       1.3, because he did a few months ago? The application may not
       work at all, or even worse, partially work. Remember that any
       software anomaly is called a bug, and you are the one
       responsible for the bugs.

       </para></listitem>

   </itemizedlist>

   </para>

   <para>

     Although Sun has recently introduced the Java Web Start
     mechanism, it does not address all the issues: users want
     standard windows applications, that install in the standard
     "program files" directory, and which they can launch by
     double-clicking a standard .exe.

   </para>

  </sect2>


  <sect2> <title>Benefits</title>

    <para>
     JSmooth aims at enhancing the user experience by taking care of all
     those issues: the java application is wrapped in an .exe, as any
     other Windows software. When the user clicks on the .exe, it
     searches the most suitable JVM installed on the computer to launch
     the java application. If no JVM is found, a dialog box is displayed
     to the users and they may be redirected to a web site.  </para>

    <para>

     JSmooth knows all the JVM version currently available. It knows
     how to pass the parameters, how to set up the memory
     configuration, how to manage the version constraints, and so on
     for every JVM version. This is the main difference between a
     simple .bat with "java -Xmx64m -jar myjar" which works only on
     the developer's computer, and an smart wrapper which adapts
     itself to the end-user's configuration.

    </para>

  </sect2>

</sect1>

<sect1><title>JSmoothGen: Windows Project Editor</title>

 <sect2><title>Running the JSmoothGen project editor</title>

    <para>
      The JSmoothGen application is the project editor. It provides a
      graphical user interface for the configuration of all the
      parameters available for building a .exe. 
    </para>

    <para>
      <mediaobject>
        <imageobject>
            <imagedata fileref="images/jsg-application.png" width="5in" format="PNG"/>
        </imageobject>
        <caption>
            <para>The JSmoothGen Application</para>
        </caption>
      </mediaobject>

    </para>
 </sect2>


 <sect2><title>Creating your first exe</title>
   <para>

     JSmooth builds a binary exe that contains all the information
     needed to launch your java application, such as the classpath, the
     java properties, the jvm version required, and so on.

   </para>


   <sect3><title>Quick Start</title>
   <para>
     

     The minimum data you need to start the creation of the binary
     executable for your application is to specify a classpath and a
     fully-qualified class name. You can configure both in the <function>Java
     Application</function> panel (add new jars or directories using the
     funny icon with a yellow + sign, and type the class name in the
     <label>Main Class</label> field.

  </para>

   <para>

     Once done, go to the <function>Windows Executable</function> panel,
     and type the name of the executable in the <label>Executable
     Name</label> field. Do not forget to add the <label>.exe</label>
     suffix, for your executable name. Something like
     <function>my-app.exe</function> would be fine.

   </para>

   <para>

    Of course, you could specify many more options for the java
    launching, but above is all what's required. Now, you are nearly
    done. Click on the save button (or in the
    <guimenu>File+Save</guimenu> menu) and select a filename for the
    project. This is an important step, because all the path stored in
    the file, and displayed in the GUI are relative to this file.

   </para>

 <para>

   Once your project is saved, it is just a matter of clicking on the
   <guimenu>Project+Create Exe</guimenu>. And that's it. You can use
   the <guimenu>Project+Run Exe</guimenu> to run the program, or
   double-click the file name that was specified in <label>Windows
   Executable</label> panel, which can be found in the same directory
   than the project file.

 </para>

 <warning>
 <para>
  You can modify the location of the every file in the
  project, but you must always keep this simple rule in mind:

 <itemizedlist>

   <listitem><para>All the files saved and displayed in the Graphical
   User Interface are relative to the project file. </para>

   </listitem>

 </itemizedlist>
 </para>
 </warning>
 </sect3>
 </sect2>

</sect1>

<sect1><title>JSmoothGen structure</title>

 <sect2><title>Skeleton Selection</title>

    <para>

       The JSmooth application is based on a template system called
       "skeleton". Choosing a skeleton is the first step in the
       creation of a jsmooth executable. 
    </para>

    <para>
       A skeleton is a template with a specific behaviour.  For
       instance, the following skeleton are bundled with JSmooth as of
       version 0.9.3: 
    </para>

    <para>
     <itemizedlist>
       <listitem><para>

           The Console Wrapper is a skeleton designed for console
           applications (ie. which are run in the windows
           console). This skeleton takes care of passing the command
           line arguments to java application, it ensures the i/o are
           routed to the current console, and so on.  </para>
       
	<para>
	  If no JVM is found, the application displays a text message
	to the standard output.  </para>

       </listitem>

       <listitem><para> The Windowed Wrapper is designed for standard
        Windows applications, which do not use console. 
	</para>

	<para>
	  If no JVM is found, the skeleton displays a Windows
	  OK/Cancel alert. If the user selects the OK button, the
	  default web browser is launched on a default web page. Both
	  the message of the alert and the URL of the web page are
	  configurable in the <guilabel>Skeleton Properties panel</guilabel>.
	</para>

        </listitem>
       </itemizedlist>

    </para>

    <para>
      <mediaobject>
        <imageobject>
            <imagedata fileref="images/jsg-skeleton.png" format="PNG"/>
        </imageobject>
        <caption>
            <para>The Skeleton selection panel</para>
        </caption>
      </mediaobject>
    </para>

 </sect2>

 <sect2><title>The Windows Executable</title>

    <para>
      The windows executable created by the JSmooth wrapping system
    can be configured in many ways. The executable itself can be
    customized with the following parameters:
     </para>

     <para>
       <itemizedlist>
        <listitem><para>The executable name is the most obvious
        parameter. This is simply the name of the win32 file created
        by JSmooth.
	   </para>
         </listitem>

        <listitem><para>The current directory can be modified to suit
        your needs. For instance, if you want your executable to be in
        a <filename class="directory">bin\</filename> sub-directory,
        but still want it to access the resources as if it were in the
        base directory, it may be convenient to modifiy the current
        directory to be <filename class="directory">..</filename>.

	 </para><para> 

            When this parameter is specified, the wrapper simply
            changes the current directory with the value "as is". For
            instance, to change the current directory to a <filename
            class="directory">res</filename> subdirectory, write
            <filename class="directory">res</filename> in the Current
            Directory field.
 
        </para>

        <warning>
	  <para>

	    When run as a Windows Application, the default current
	    directory is always the directory of the executable
	    binary. However, for a console wrapper, the default
	    current directory is the path where the command line is
	    currently tied. 
          </para>

	  <para>
	    Changing the current directory for a console application
	    is probably not what you want. A common issue is for a
	    console application to find resources which are found in
	    the file system (i.e not in the jar of the
	    application). Lots of application work this way, but Java
	    applications, unfortunately, do not have access to the information they
	    need: the location of the binary executable they are
	    launched from. A work-around is to use an environment
	    variable specific to your application. This is was ANT does, for instance. 
	  </para>

	  <para>
	    You can do something equivalent with JSmooth without using
	  an environment variable (which may be complicated to set
	  under windows). Instead, define a Java Property, and set
	  <systemitem>${EXECUTABLEPATH}</systemitem> as value. The effect of
	  this is to pass to your application a java property which
	  indicates where the executable is located. Just use
	  <methodname>System.getProperty()</methodname> call to
	  retrieve the value.  </para>

        </warning>

	 </listitem>

	 <listitem>
	   <para>

	    The executable icon field specify the icon image that is
	    associated to the executable, under Windows. The default
	    configuration of JSmoothGen support Windows Icon files
	    (.ICO) as well as the standard types supported by the JVM
	    (GIF, PNG, and JPG files).
	   </para>

	   <para>
	   
	    The current implementation only sets up a single icon
	    image in the executable. Here is a brief description on
	    how JSmoothGen creates the executable icon:

	    <itemizedlist>

	     <listitem><para>If the user selects a standard Windows icon (.ICO), it
	    chooses

            	    <footnote><para>The Windows ICO file format can store
	            several images in a single file. A single file often
	            stores icons at several resolutions.
		    </para></footnote>

	    first 32x32 icons, then 64x64, then 16x16.
	        </para></listitem>

	     <listitem><para>
	      If the user selects any other recognized image file, the
	      image is scaled to be 32x32, and quantized to fit in 256
	      colors. The color reduction is rough and it is always
	      better to use an image processing software for the job.
             </para></listitem>

	    </itemizedlist>
           </para>

	 </listitem>

        </itemizedlist>
     </para>

    <para>
      <mediaobject>
        <imageobject>
            <imagedata fileref="images/jsg-executable.png" format="PNG"/>
        </imageobject>
        <caption>
            <para>The Executable panel</para>
        </caption>
      </mediaobject>

    </para>
 </sect2>

 <sect2><title>Defining the Java Application parameters</title>

    <para>
     This is the panel where you can specify all the parameters related to the java application itself.
    </para>

    <para>
      <mediaobject>
        <imageobject>
            <imagedata fileref="images/jsg-javaapplication.png" format="PNG"/>
        </imageobject>
        <caption>
            <para>The Java Application configuration panel</para>
        </caption>
      </mediaobject>
    </para>

    <para>
    
       <itemizedlist>
        <listitem>
         <para>
	   The <guilabel>Jar Location</guilabel> field specifies the
	   main JAR file of the application. There may be additional
	   jar specified in the <guilabel>Classpath</guilabel>
	   interface, but this one is mandatory. It contains the main
	   class of the application, and is added as a resource to the
	   executable created by JSmooth.
	 </para>
        </listitem>
        <listitem>
         <para>

	   Edit the <guilabel>Main Class</guilabel> field to specify
	   the wrapper which class of the jar (see above) is to be
	   considered the entry point of the program. This field is
	   mandatory as well.

	 </para>
        </listitem>

        <listitem>
         <para>

	   The <guilabel>Arguments</guilabel> field allows you to
	   specify default parameters for the application. Those
	   arguments are passed as if they were specified on the
	   command line, and are made available in the String array of
	   the main method by Java.
	 </para>
	 <warning>
	   <para>

	     The <guilabel>Arguments</guilabel> may be overrided by
	     some wrappers. For instance, the <guilabel>Console
	     Wrapper</guilabel> uses the arguments from the command
	     line instead.

	   </para>
	 </warning>
        </listitem>

        <listitem>
         <para>

	     The <guilabel>ClassPath</guilabel> list proposes you to
	     edit an ordered list of classpaths. To add a classpath,
	     click on the <guiicon><inlinegraphic
	     fileref="images/stock_insert-element.png"/></guiicon> and
	     select either a .JAR, a .ZIP or a directory using the
	     file chooser. You can remove or edit the classpath
	     entries with the <guiicon><inlinegraphic
	     fileref="images/stock_remove-element.png"/></guiicon> and
	     <guiicon><inlinegraphic
	     fileref="images/stock_edit.png"/></guiicon> buttons.

	 </para>
	 <para>
	 
	     The items can be ordered to reflect the class look-up
	     priorities of your application. Select an item, and press
	     either <guiicon><inlinegraphic
	     fileref="images/stock_up.png"/></guiicon> or
	     <guiicon><inlinegraphic
	     fileref="images/stock_down.png"/></guiicon>. The rules
	     are simple: the higher in the list, the higher the
	     priority in the classpath search sequence.

	 </para>
	</listitem>
       </itemizedlist>
    </para>

 </sect2>

 <sect2><title>Selecting the most suitable JVM</title>
    <para>

      Click on the <guilabel>JVM Selection</guilabel> tab to specify
      the Java look-up parameters.

    </para>
    <para>
      <mediaobject>
        <imageobject>
            <imagedata fileref="images/jsg-selection.png" format="PNG"/>
        </imageobject>
        <caption>
            <para>The JVM Selection panel</para>
        </caption>
      </mediaobject>
    </para>

    <sect3><title>Java Version</title>
      <para>
       If your application requires a minimum or a maximum version of
       Java to run, the <guilabel>Version of Target VM</guilabel>
       subpanel will probably be of high interest for you.
      </para>

      <para>
        Just leave the field empty if you do not wish to any
      constraint on the JVM version required for your application.
      </para>

      <para>
        To specify a version, either as a minimum or a maximum, you
        must specify the major, minor, and sub-minor version number
        you want to set the constraint on. You don't need to specify
        all of those three numbers, but remember that if you leave it
        empty, it is considered as 0.

      </para>
      <para>
        The values are all inclusive. For instance, if you specify 1.4
        as a maximum means that the java wrapper accepts 1.4.0 JVM,
        but not 1.4.1. 
      </para>

      <para>
        If your application runs exclusively with JVM 1.2 and 1.3, but
      not 1.1 nor 1.4 or above, just specify 1.2 for the minimum
      version, and 1.3.99 as a maximum version.
      </para>
    
    </sect3>
    
    <sect3><title>JVM Bundle</title>
      <para>

        Even if the wrappers of JSmooth provide a reasonnable user
        experience for the users who do not have Java installed, you
        may wish to bundle a JRE with your application. In such a
        case, tick the <guilabel>Use JVM Bundle</guilabel> checkbox,
        and specify the directory location of the JRE.

      </para>

    </sect3>

    <sect3><title>The JVM Search sequence</title>
      <para>

	The wrappers are able to detect most, if not all, the JVM
	available on the end-user computer. Before launching the java
	application, they try to find a JVM using a preference
	order. The default is to use the Windows registry to look-up
	the JRE that have been installed, then use some environment
	variable, and finally try to use Microsoft's JView.
      </para>

      <para>

        This search sequence is fine for most configuration, however
        you can still modify it to best suit your needs. Use the
        <guiicon><inlinegraphic
        fileref="images/stock_up.png"/></guiicon> and
        <guiicon><inlinegraphic
        fileref="images/stock_down.png"/></guiicon> button to modify
        the priorities..

      </para>
    </sect3>

    <para>
    </para>
 </sect2>

 <sect2><title>Configuring the JVM</title>
    <para>

      The JVM Configuration offers the possibility to specify the
      parameters passed to the Java Virtual Machine when launching
      your application.

    </para>
    <para>
      <mediaobject>
        <imageobject>
            <imagedata fileref="images/jsg-configuration.png" format="PNG"/>
        </imageobject>
        <caption>
            <para>The JVM configuration panel</para>
        </caption>
      </mediaobject>
    </para>

    <sect3><title>Options</title>

      <para>
        The <guilabel>Options</guilabel> panel provides editable fields
        to configure the memory configuration of the JVM. Specify the
        numeric value in the text field, and the unit in the combo box.
      </para>
    </sect3>

    <sect3><title>Java Properties</title>

      <para>

         Java properties are name/value pairs that are passed to the
         JVM, and are accessible by java applications using the
         System.getProperty() method.

      </para>

      <para>

         To add a new Java Property, click on the
         <guiicon><inlinegraphic
         fileref="images/stock_insert-element.png"/></guiicon>. A
         dialog box pops up.
	       <mediaobject>
	         <imageobject>
		   <imagedata fileref="images/jsg-addprop.png" format="PNG"/>
		 </imageobject>
	       </mediaobject>

	 Specify the name and the value for this property, and click
	 on the <guibutton>Done</guibutton> button.

      </para>

      <sect4><title>Special Values</title>
        <para>
	  
	  You can use the Java Property mechanism to pass special
	  values to your java app.

         <itemizedlist>
          <listitem>
            <para>

	      Environment Variable: If you pass a string of the form
	      %ENV% in the value field of the property, the wrappers
	      will replace the string with the content of the ENV
	      environment variable.

	    </para>

	    <para>

	      For instance, to pass the content of the JAVA_HOME
	      environment variable, adds %JAVA_HOME% in the
	      <guilabel>Value</guilabel> field.

            </para>
          </listitem>

          <listitem>

	    <para>

	     JSmooth also makes some special variable accessible for
	     your application.

	   <informaltable frame='all'>
	    <tgroup cols='2'>
	      <colspec colwidth='2.0in'/>
	      <colspec colwidth='3.0in'/>
	      <tbody>
	        <row><entry><para>Form</para></entry><entry><para>Meaning</para></entry></row>
	        <row><entry><para><function>${EXECUTABLEPATH}</function></para></entry>

			<entry><para> Replaced by the path to the
			  executable binary. For instance, if the
			  executable binary launched is located at
			  c:/program files/jsmooth/test.exe, this variable is replaced with
			  c:/program files/jsmooth</para>

                  </entry></row>

		<row><entry><para><function>${EXECUTABLENAME}</function></para></entry>

		    <entry><para>Replaced by the name of the
			  executable binary. For instance, if the
			  executable binary launched is located at
			  c:/program files/jsmooth/test.exe, this variable is replaced with
			  test.exe </para>

		  </entry></row>

		<row><entry><para><function>${COMPUTERNAME}</function></para></entry><entry><para>Replaced by the name of the computer.</para></entry></row>

		<row><entry><para><function>${VMSELECTION}</function></para></entry><entry>

		        <para>Replaced by the name of the selection
		        method used to spawn the JVM. The value
		        replaced is typically one of the following
		        values:

			 <itemizedlist>
			   <listitem><para><function>registry</function>, when the VM location is found in the registry</para></listitem>
			   <listitem><para><function>jdkpath</function>, when the VM if found in the %JDK_HOME% variable </para></listitem>
			   <listitem><para><function>jrepath</function>, when the VM if found in the %JRE_HOME% variable</para></listitem>
			   <listitem><para><function>javahome</function>, when the VM if found in the %JAVA_HOME% variable</para></listitem>
			   <listitem><para><function>jview</function>, if the VM is JView</para></listitem>
			   <listitem><para><function>exepath</function>, if the VM was found in the windows path</para></listitem>
			   <listitem><para><function>bundled</function>, if the VM bundled with the application is used</para></listitem>
			</itemizedlist>
		  </para></entry></row>


		<row><entry><para><function>${VMSPAWNTYPE}</function></para></entry><entry>

		        <para>This variable is replaced by one of the following values:

			 <itemizedlist>

			   <listitem><para><function>JVMDLL</function>
			   if the JVM is spawned using a DLL loading
			   and instanciation</para></listitem>

			   <listitem><para><function>PROC</function>
			   if the JVM is spawned in a new process
			   using the Windows' CreateProcess function
			   </para></listitem>

			</itemizedlist>
		  </para></entry></row>

	      </tbody>
	      </tgroup>
	    </informaltable>

	    </para>

          </listitem>


         </itemizedlist>
	</para>
      </sect4>

    </sect3>
 </sect2>

 <sect2><title>Skeleton Properties</title>
    <para> 

         This panel is specific to the wrapper selected in the
         <guilabel>Skeleton Selection</guilabel> panel.

    </para>
    <para>
      <mediaobject>
        <imageobject>
            <imagedata fileref="images/jsg-skeletonproperties.png" format="PNG"/>
        </imageobject>
        <caption>
            <para>The Skeleton-specifics properties panel</para>
        </caption>
      </mediaobject>
    </para>
 </sect2>

</sect1>

<sect1><title>Command Line </title>
  <sect2><title>Running <application>jsmoothcmd.exe</application></title>

    <para>

      You can build a wrapped java application using the
      <application>jsmoothcmd.exe</application> command. However, note
      that it only takes as argument a project file created by the
      JSmoothGen graphical application. In other words, you can't
      create a project from scratch using only the jsmoothcmd program,
      which is provided only as a convenience for scripting purposes.

    </para>

    <sect3>Usage</sect3>
    <para>

     <programlisting>jsmoothcmd.exe [myproject.jsmooth]</programlisting>

    </para>

    <para>
     
      The .jsmooth suffix may be ommited. The application
      either creates the executable binary successfully, or returns an
      error message.

    </para>
  </sect2>
</sect1>

<sect1><title>Using JSmooth as an Ant Task</title>

   <para> JSmooth can also be used as an ant task. This permits using
   it as a tool integrated in a standard ant deployment chain.</para>

 <sect2><title>Defining the ant task</title>

   <para>
     This is the first step to be able to use jsmooth in your ant
     scripts. You need to add a <function>taskdef</function> tag that
     provides to ant the information required to create the
     <function>jsmoothgen</function> task.
    </para>

   <para>
<programlisting>
&lt;taskdef name="jsmoothgen"
     classname="net.charabia.jsmoothgen.ant.JSmoothGen"
     classpath="path/to/jsmoothgen-ant.jar"/&gt;
</programlisting>
   </para>

   <para>
     If your jsmooth project uses the Sun's JIMI library to recognize
   .ico files, you must add it to the classpath as well.
   </para>

 </sect2>

 <sect2><title>Using the <function>jsmoothgen</function> task</title>

   <para>
    The task takes two mandatory parameters:
    <itemizedlist>

     <listitem><para> <function>project</function>: a reference to the project file.
       </para></listitem>

     <listitem><para> <function>skeletonroot</function>: a reference
       to a directory where the skeletons can be found. Be careful,
       this is not the directory where the skeleton used by the
       project can be found, be rather the directory
       one level up.</para></listitem>

   </itemizedlist>
    
   </para>

   <para>
       Here is a sample, extracted from the jsmooth build.xml file:
<programlisting>
&lt;jsmoothgen project="jsprj/jsmoothgen.jsmooth" 
      skeletonroot="${dist}/skeletons"/&gt;
</programlisting>
   </para>
 </sect2>
</sect1>


<sect1><title>Frequently Asked Question</title>

  <sect2><title>Wrappers Behaviour</title>

    <qandaset>
      <qandaentry>
        <question>
	  <para>
	   How does a wrapper extract the jar file?
	  </para>
	</question>
	<answer>
	 <para>
	  
	  The jar file extraction is wrapper-specific. However, all
	  the wrapper provided with JSmooth as of version 0.9.3
	  extract it in the default temporary directory. This is the
	  standard behaviour expected by Windows application.

	 </para>
	</answer>
      </qandaentry>


      <qandaentry>
        <question>
	  <para>
	   What happens to the extracted jar file when the java application exits?
	  </para>
	</question>
	<answer>
	 <para>

	  Whenever possible, the wrappers delete the file on
	  exit. Note however that this is not always possible. For
	  example, an instance of a JVM created using the JVM DLL does
	  not unload cleanly. This behaviour is documented by Sun, and
	  there is no known work-around for it.

	 </para>

	 <para>

	  Both Windowed and Console wrapper always prefer the JVM
	  instanciation methods that allow them to delete the temp jar
	  after the application exits.

	 </para>

	 <para>

  	  Note however that deleting the files in the windows TEMP
	  directory is not required for Windows applications, and most
	  application just leave them, letting the operating system
	  manage it. However, MS Windows deletes those temp files only
	  when the disks are running low in available space.

	 </para>

	</answer>
      </qandaentry>

      <qandaentry>
        <question>
	  <para>

	   Jsmooth allows only one embedded jar in the executable
	   binary. Does it mean that all the java application must be
	   exhaustively set up in this jar ?

	  </para>
	</question>
	<answer>
	 <para>
	  
	   No. While the jsmooth wrappers require a jar to bootstrap
	   the java application, you can reference other jar files in
	   a jsmooth project. Those jar files will be accessible to
	   your executable binary, provided the path specified is
	   found at runtime. 
	 </para><para>
	   It is often convenient to put the main
	   jar in the executable, but you can just put a small jar
	   which purpose is just to bootstrap the application (for
	   instance by displaying a splash screen with specific
	   information and calling another class).

	 </para>
	</answer>
      </qandaentry>



    </qandaset>
    </sect2>

    <sect2><title>Trouble &amp; issues with wrappers</title>

    <qandaset>
      <qandaentry>
        <question>
	  <para>
	   The wrapped applications complain about a "MSVCRT.DLL not found" on Windows 95?
	  </para>
	</question>
	<answer>
	 <para>

	   The MSVCRT.DLL file is required by the wrapped application
	   but may be missing on some Windows 95 computers that have
	   never been upgraded. This file is often installed by
	   third-party application, but it may happen that your users
	   do not have it installed.

	 </para>

	 <para>
      
           To solve this issue, either ask your user to upgrade to a
	   decent OS, or just bundle this MSVCRT.DLL along with your
	   application.

         </para>

	</answer>
      </qandaentry>

    </qandaset>


  </sect2>

</sect1>

<sect1><title>License</title>

 <para>
All the JSmooth project is distributed under the terms of the GNU
General Public License. Please read the License.txt file that comes
with the package. Alternatively, you can find additional information
on the GNU GPL license on the <ulink url="http://www.gnu.org">GNU Web
Site</ulink></para>

 <para>
This license applies to all the files of the project, but not on the
generated executable. This means that you are free to generate
executable wrappers for proprietary software and distribute them
without applying the terms of the GPL to them.
 </para>

 <para>
Of course, this is the one and only exception. All other kind of
distribution of any file of the JSmooth package must conform with the
terms of the GNU General Public License.
 </para>

</sect1>

</article>
