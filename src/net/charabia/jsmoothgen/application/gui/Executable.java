/*
  JSmooth: a VM wrapper toolkit for Windows
  Copyright (C) 2003 Rodrigo Reyes <reyes@charabia.net>

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

*/

package net.charabia.jsmoothgen.application.gui;

import net.charabia.jsmoothgen.application.*;
import javax.swing.*;

public class Executable extends javax.swing.JPanel implements ModelUpdater
{
	private JSmoothModelBean m_model;
	private String m_iconLocation;
	
	
	/** Creates new form BeanForm */
	public Executable()
	{
		initComponents();
		JFileChooser fc = new JFileChooser();
		fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		m_outputDir.setFileChooser(fc);
	}
	
	public void setModel(JSmoothModelBean model)
	{
		m_model = model;
		m_executableNameField.setText(m_model.getExecutableName());
		if (m_model.getBaseDir() != null)
		{
			m_outputDir.setFile(new java.io.File(m_model.getBaseDir()));
		}
		else
		{
			m_outputDir.setFile(null);
		}
		
		m_iconLocation = model.getIconLocation();
		
		if (m_iconLocation != null)
		{
			String iconpath;
			if (new java.io.File(m_iconLocation).isAbsolute())
				iconpath = m_iconLocation;
			else
				iconpath = new java.io.File(new java.io.File(model.getBaseDir()), model.getIconLocation()).getAbsolutePath();
			ImageIcon icon = new ImageIcon(iconpath, "default icon");	
			m_iconDisplay.setIcon(icon);
		}
	}
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	private void initComponents()//GEN-BEGIN:initComponents
	{
		java.awt.GridBagConstraints gridBagConstraints;
		
		m_iconChooser = new javax.swing.JFileChooser();
		jLabel1 = new javax.swing.JLabel();
		m_executableNameField = new javax.swing.JTextField();
		m_labelOutputDir = new javax.swing.JLabel();
		m_outputDir = new net.charabia.jsmoothgen.application.gui.util.FileSelectionTextField();
		jLabel2 = new javax.swing.JLabel();
		jPanel2 = new javax.swing.JPanel();
		m_iconDisplay = new javax.swing.JLabel();
		m_buttonIconChooser = new javax.swing.JButton();
		
		
		setLayout(new java.awt.GridBagLayout());
		
		jLabel1.setText("Executable Name");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.ipadx = 5;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
		gridBagConstraints.weightx = 0.1;
		add(jLabel1, gridBagConstraints);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.ipadx = 1;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
		gridBagConstraints.weightx = 0.8;
		add(m_executableNameField, gridBagConstraints);
		
		m_labelOutputDir.setText("Output Directory");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
		add(m_labelOutputDir, gridBagConstraints);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
		add(m_outputDir, gridBagConstraints);
		
		jLabel2.setText("Executable Icon");
		add(jLabel2, new java.awt.GridBagConstraints());
		
		jPanel2.setBorder(new javax.swing.border.EtchedBorder());
		m_iconDisplay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/classes/gnome-application-x-gzip.png")));
		jPanel2.add(m_iconDisplay);
		
		m_buttonIconChooser.setText("...");
		m_buttonIconChooser.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				buttonIconChooserActionPerformed(evt);
			}
		});
		
		jPanel2.add(m_buttonIconChooser);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
		gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 5);
		add(jPanel2, gridBagConstraints);
		
	}//GEN-END:initComponents

	private void buttonIconChooserActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_buttonIconChooserActionPerformed
	{//GEN-HEADEREND:event_buttonIconChooserActionPerformed
		// Add your handling code here:
		if (m_iconChooser.showOpenDialog(this) == m_iconChooser.APPROVE_OPTION)
		{
			System.out.println("Icon choosen : " + m_iconChooser.getSelectedFile().toString());
			ImageIcon icon = new ImageIcon(m_iconChooser.getSelectedFile().getAbsolutePath(), "default icon");
			m_iconDisplay.setIcon(icon);
			m_iconLocation = m_iconChooser.getSelectedFile().getAbsolutePath();
			this.validate();
			this.invalidate();
		}
	}//GEN-LAST:event_buttonIconChooserActionPerformed
	
	
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JButton m_buttonIconChooser;
	public javax.swing.JTextField m_executableNameField;
	private javax.swing.JFileChooser m_iconChooser;
	private javax.swing.JLabel m_iconDisplay;
	private javax.swing.JLabel m_labelOutputDir;
	private net.charabia.jsmoothgen.application.gui.util.FileSelectionTextField m_outputDir;
	// End of variables declaration//GEN-END:variables
		
	public String getExecutableName()
	{
		return m_executableNameField.getText();
	}
	
	public void updateModel()
	{
		m_model.setExecutableName(m_executableNameField.getText());
		java.io.File outputdir = m_outputDir.getFile();
		if (outputdir != null)
			m_model.setBaseDir(outputdir.toString());
		m_model.setIconLocation(m_iconLocation);
	}
	
	
}
