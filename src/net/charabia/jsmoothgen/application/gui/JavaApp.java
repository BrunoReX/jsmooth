/*
  JSmooth: a VM wrapper toolkit for Windows
  Copyright (C) 2003 Rodrigo Reyes <reyes@charabia.net>
 
  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */

package net.charabia.jsmoothgen.application.gui;

import net.charabia.jsmoothgen.application.*;
import net.charabia.jsmoothgen.application.gui.util.*;
import javax.swing.*;
import java.io.*;

public class JavaApp extends javax.swing.JPanel implements ModelUpdater
{
	private JSmoothModelBean m_model;
	private JFileChooser m_jarLocFileChooser;
	private EditableListFileEditor m_fileeditor;
	
	/** Creates new form BeanForm */
	public JavaApp()
	{
		initComponents();
		m_jarLocFileChooser = new JFileChooser();
		m_jarLocFileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
		m_jarLocFileChooser.addChoosableFileFilter(new ClassPathFileFilter());
		m_fileeditor = new EditableListFileEditor();
		m_fileeditor.setFileChooser(m_jarLocFileChooser);
		m_classPathList.setEditor(m_fileeditor);
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        m_jarLocation = new net.charabia.jsmoothgen.application.gui.util.FileSelectionTextField();
        jLabel2 = new javax.swing.JLabel();
        m_mainClassName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        m_arguments = new javax.swing.JTextField();
        classpathPanel = new javax.swing.JPanel();
        m_classPathList = new net.charabia.jsmoothgen.application.gui.util.SortedEditableList();

        setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Jar location");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        add(m_jarLocation, gridBagConstraints);

        jLabel2.setText("Main Class");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        add(m_mainClassName, gridBagConstraints);

        jLabel3.setText("Arguments");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        add(jLabel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        add(m_arguments, gridBagConstraints);

        classpathPanel.setLayout(new java.awt.BorderLayout());

        classpathPanel.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder("ClassPath"), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5))));
        classpathPanel.add(m_classPathList, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(classpathPanel, gridBagConstraints);

    }//GEN-END:initComponents
	
	public void updateModel()
	{
//		m_model.setJarLocation(JSmoothModelPersistency.makePathRelativeIfPossible(new File(m_model.getBaseDir()),
//				m_jarLocation.getFile()).toString());
		File jar = m_jarLocation.getFile();
		if (jar != null)
			m_model.setJarLocation(jar.toString());
		else
			m_model.setJarLocation(null);
		m_model.setMainClassName(m_mainClassName.getText());
		m_model.setArguments(m_arguments.getText());
		Object[] flist = m_classPathList.getData();
		String[] data = new String[flist.length];
		for (int i=0; i<data.length; i++)
		{
			data[i] = flist[i].toString();
		}
		m_model.setClassPath(data);
	}
	
	public void setModel(java.io.File basedir, JSmoothModelBean model)
	{
		m_model = model;
		if (basedir != null)
		{
		    System.out.println("basedir of jarlocation: " + basedir);
			m_jarLocation.setBaseDir(basedir);
			m_jarLocFileChooser.setCurrentDirectory(basedir);
			
			m_fileeditor.setRootDir(basedir);
		}
		else
		{
			m_jarLocation.setBaseDir(null);
		}
		
		m_jarLocation.setFileChooser(m_jarLocFileChooser);
		if (m_model.getJarLocation() != null)
		{
			System.out.println("basedir: " + basedir);
			System.out.println("jarloc: " + m_model.getJarLocation());
			m_jarLocation.setFile(new File(m_model.getJarLocation()));
		}
		else
		{
			m_jarLocation.setFile(null);
		}
		
		if (m_model.getMainClassName() != null)
			m_mainClassName.setText(m_model.getMainClassName());
		else
			m_mainClassName.setText("");
		
		if (m_model.getArguments() != null)
			m_arguments.setText(m_model.getArguments());
		else
			m_arguments.setText("");
		
		if (m_model.getClassPath() != null)
		{
			String[] classpathstr = m_model.getClassPath();
			File[] flist = new File[classpathstr.length];
			for (int i=0; i<classpathstr.length; i++)
			{
				File f = new File(classpathstr[i]);
				if (basedir != null)
				{
				    f = JSmoothModelPersistency.makePathRelativeIfPossible(basedir, f);
				}
				flist[i] = f;
			}
			m_classPathList.setData(flist);
		} else
		{
			m_classPathList.setData(new String[0]);
		}
	}
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel classpathPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField m_arguments;
    private net.charabia.jsmoothgen.application.gui.util.SortedEditableList m_classPathList;
    private net.charabia.jsmoothgen.application.gui.util.FileSelectionTextField m_jarLocation;
    private javax.swing.JTextField m_mainClassName;
    // End of variables declaration//GEN-END:variables
	
}
