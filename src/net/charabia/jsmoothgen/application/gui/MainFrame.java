/*
  JSmooth: a VM wrapper toolkit for Windows
  Copyright (C) 2003 Rodrigo Reyes <reyes@charabia.net>

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

*/

package net.charabia.jsmoothgen.application.gui;

import net.charabia.jsmoothgen.application.*;
import net.charabia.jsmoothgen.application.gui.util.*;
import net.charabia.jsmoothgen.skeleton.*;
import java.io.*;
import javax.swing.*;


public class MainFrame extends javax.swing.JFrame implements MainController
{
	private StaticWizard m_wizard;
	private SkeletonList m_skelList;
	private File m_projectFile = null;
	/** Creates new form MainFrame */
	public MainFrame()
	{
		m_skelList = new SkeletonList(new File("F:/Documents and Settings/Rodrigo/Mes documents/projects/jsmooth/skeletons"));
		
		initComponents();
		m_wizard = new StaticWizard();
		m_wizard.setMainController(this);
		m_centralPane.add(m_wizard);
		
		m_projectFileChooser.addChoosableFileFilter(new SimpleFileFilter("jsmooth", "JSmooth Project Files"));
		
		pack();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	private void initComponents()//GEN-BEGIN:initComponents
	{
		javax.swing.JMenu jMenu1;
		
		m_projectFileChooser = new javax.swing.JFileChooser();
		jToolBar1 = new javax.swing.JToolBar();
		jButton1 = new javax.swing.JButton();
		jButton2 = new javax.swing.JButton();
		jButton3 = new javax.swing.JButton();
		jPanel1 = new javax.swing.JPanel();
		jSeparator1 = new javax.swing.JSeparator();
		jTextField1 = new javax.swing.JTextField();
		m_centralPane = new javax.swing.JPanel();
		jMenuBar1 = new javax.swing.JMenuBar();
		jMenu1 = new javax.swing.JMenu();
		m_menuNew = new javax.swing.JMenuItem();
		jSeparator2 = new javax.swing.JSeparator();
		m_menuLoad = new javax.swing.JMenuItem();
		m_menuSave = new javax.swing.JMenuItem();
		m_menuSaveAs = new javax.swing.JMenuItem();
		jSeparator3 = new javax.swing.JSeparator();
		m_menuExit = new javax.swing.JMenuItem();
		jMenu2 = new javax.swing.JMenu();
		jMenuItem1 = new javax.swing.JMenuItem();
		
		
		addWindowListener(new java.awt.event.WindowAdapter()
		{
			public void windowClosing(java.awt.event.WindowEvent evt)
			{
				exitForm(evt);
			}
		});
		
		jButton1.setText("jButton1");
		jToolBar1.add(jButton1);
		
		jButton2.setText("jButton2");
		jToolBar1.add(jButton2);
		
		jButton3.setText("jButton3");
		jToolBar1.add(jButton3);
		
		getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);
		
		jPanel1.setLayout(new java.awt.BorderLayout());
		
		jSeparator1.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 1, 2, 1)), new javax.swing.border.EtchedBorder()));
		jPanel1.add(jSeparator1, java.awt.BorderLayout.NORTH);
		
		jTextField1.setEditable(false);
		jTextField1.setHorizontalAlignment(javax.swing.JTextField.LEFT);
		jTextField1.setText("jTextField1");
		jTextField1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
		jTextField1.setFocusable(false);
		jPanel1.add(jTextField1, java.awt.BorderLayout.CENTER);
		
		getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);
		
		m_centralPane.setLayout(new java.awt.GridLayout(1, 1));
		
		getContentPane().add(m_centralPane, java.awt.BorderLayout.CENTER);
		
		jMenu1.setText("_File");
		m_menuNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
		m_menuNew.setText("New");
		m_menuNew.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				menuNewActionPerformed(evt);
			}
		});
		
		jMenu1.add(m_menuNew);
		
		jMenu1.add(jSeparator2);
		
		m_menuLoad.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
		m_menuLoad.setText("Open project...");
		m_menuLoad.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				menuLoadActionPerformed(evt);
			}
		});
		
		jMenu1.add(m_menuLoad);
		
		m_menuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
		m_menuSave.setText("Save");
		m_menuSave.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				menuSaveActionPerformed(evt);
			}
		});
		
		jMenu1.add(m_menuSave);
		
		m_menuSaveAs.setText("Save as...");
		m_menuSaveAs.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				menuSaveAsActionPerformed(evt);
			}
		});
		
		jMenu1.add(m_menuSaveAs);
		
		jMenu1.add(jSeparator3);
		
		m_menuExit.setText("Exit");
		jMenu1.add(m_menuExit);
		
		jMenuBar1.add(jMenu1);
		
		jMenu2.setText("Help");
		jMenuItem1.setText("About");
		jMenu2.add(jMenuItem1);
		
		jMenuBar1.add(jMenu2);
		
		setJMenuBar(jMenuBar1);
		
		pack();
	}//GEN-END:initComponents
	
	private void menuLoadActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_menuLoadActionPerformed
	{//GEN-HEADEREND:event_menuLoadActionPerformed
		// Add your handling code here:
		open();
	}//GEN-LAST:event_menuLoadActionPerformed
	
	private void menuSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_menuSaveActionPerformed
	{//GEN-HEADEREND:event_menuSaveActionPerformed
		// Add your handling code here:
		save(false);
	}//GEN-LAST:event_menuSaveActionPerformed
	
	private void menuSaveAsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_menuSaveAsActionPerformed
	{//GEN-HEADEREND:event_menuSaveAsActionPerformed
		// Add your handling code here:
		save(true);
	}//GEN-LAST:event_menuSaveAsActionPerformed
	
	private String getSuffix(java.io.File f)
	{
		String fstr = f.getAbsolutePath();
		int lastDot = fstr.lastIndexOf('.');
		if ((lastDot >= 0) && ((lastDot+1) < fstr.length()))
		{
			return fstr.substring(lastDot+1);
		}
		return "";
	}
	public void open()
	{
		if (m_projectFileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
		{
			m_projectFile = m_projectFileChooser.getSelectedFile();
		}
		this.setTitle("JSmooth: " + m_projectFile.toString());
		
		try
		{
			JSmoothModelBean model = JSmoothModelPersistency.load(m_projectFile);
			m_wizard.setModel(model);
		} catch (IOException iox)
		{
			iox.printStackTrace();
		}
	}
	
	public void save(boolean forceNewFile)
	{
		m_wizard.updateModel();
		
		if (forceNewFile || (m_projectFile == null))
		{
			if (m_projectFileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)
			{
				m_projectFile = m_projectFileChooser.getSelectedFile();
				String suf = getSuffix(m_projectFile);
				if ("jsmooth".equalsIgnoreCase(suf) == false)
				{
					m_projectFile = new File(m_projectFile.toString() + ".jsmooth");
				}
				
			}
			this.setTitle("JSmooth: " + m_projectFile.toString());
		}
		try
		{
			File root = m_projectFile.getParentFile();
			String[]res = m_wizard.getModel().normalizePaths(root);
			
			if (res != null)
			{
				StringBuffer msg = new StringBuffer();
				msg.append("<html>Not all the paths specified in the project are relative:<br><ul>");
				for (int i=0; i<res.length; i++)
				{
					msg.append("<li>");
					msg.append(res[i]);
					msg.append("<br>");
				}
				msg.append("</ul><p>The project will be saved correctly, but you should check the issue.</html>");
				
				JOptionPane.showMessageDialog(this, msg.toString(), "Warning", JOptionPane.WARNING_MESSAGE);
			}
			
			JSmoothModelPersistency.save(m_projectFile, m_wizard.getModel());
		} catch (IOException iox)
		{
			iox.printStackTrace();
		}
	}
	
	private void menuNewActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_menuNewActionPerformed
	{//GEN-HEADEREND:event_menuNewActionPerformed
		// Add your handling code here:
		JSmoothModelBean model = new JSmoothModelBean();
		m_wizard.setModel(model);
		m_projectFile = null;
	}//GEN-LAST:event_menuNewActionPerformed
	
	/** Exit the Application */
	private void exitForm(java.awt.event.WindowEvent evt)//GEN-FIRST:event_exitForm
	{
		System.exit(0);
	}//GEN-LAST:event_exitForm
	
	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[])
	{
		new MainFrame().show();
	}
	
	public void setStateText(String text)
	{
	}
	
	public SkeletonList getSkeletonList()
	{
		return m_skelList;
	}
	
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton2;
	private javax.swing.JButton jButton3;
	private javax.swing.JMenu jMenu2;
	private javax.swing.JMenuBar jMenuBar1;
	private javax.swing.JMenuItem jMenuItem1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JSeparator jSeparator1;
	private javax.swing.JSeparator jSeparator2;
	private javax.swing.JSeparator jSeparator3;
	private javax.swing.JTextField jTextField1;
	private javax.swing.JToolBar jToolBar1;
	private javax.swing.JPanel m_centralPane;
	private javax.swing.JMenuItem m_menuExit;
	private javax.swing.JMenuItem m_menuLoad;
	private javax.swing.JMenuItem m_menuNew;
	private javax.swing.JMenuItem m_menuSave;
	private javax.swing.JMenuItem m_menuSaveAs;
	private javax.swing.JFileChooser m_projectFileChooser;
	// End of variables declaration//GEN-END:variables
	
}
